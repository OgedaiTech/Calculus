@using Calculus.BlazorApp.Clients.Scenario
@using Models;
@using Calculus.BlazorApp.Components.Shared;
@inject NavigationManager NavigationManager

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary p-4 d-flex flex-column align-items-center justify-content-center"
    style="width: 150px; height: 150px;" data-bs-toggle="modal" data-bs-target="#staticBackdrop"
    @onclick="() => ModalDialog.Open()">
    <i class="bi bi-clipboard2-plus fs-1"></i> <!-- Larger icon -->
    <span class="fs-6 mt-2">Create Scenario</span> <!-- Smaller text -->
</button>

<ModalDialog @ref="@ModalDialog" Title="Create Scenario">
    <div class="row">
        <div class="mb-3">
            <label for="scenarioName" class="form-label">Scenario Name</label>
            <input type="text" class="form-control" id="scenarioName" @bind=ScenarioName />
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="text-danger mt-2">@ErrorMessage</div>
            }
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="() => ModalDialog.Close()">Close</button>
            <button class="btn btn-primary" @onclick="CreateScenarioAsync">Create</button>
        </div>

    </div>
</ModalDialog>

@code {

    private ModalDialog ModalDialog { get; set; } = null!;
    private string? ScenarioName;
    private string? ErrorMessage;

    [Inject]
    private IScenarioClient ScenarioClient { get; set; } = null!;

    private async Task CreateScenarioAsync()
    {
        if (string.IsNullOrEmpty(ScenarioName))
        {
            ErrorMessage = "Scenario name cannot be empty.";
            return;
        }

        var response = await ScenarioClient.CreateScenarioAsync(new CreateScenarioDto { Name = ScenarioName });
        if (!string.IsNullOrEmpty(response.Message))
        {
            ErrorMessage = response.Message;
        }
        else
        {
            ClearErrorMessageAndScenarioName();
            ModalDialog.Close();
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private void ClearErrorMessageAndScenarioName()
    {
        ErrorMessage = null;
        ScenarioName = string.Empty;
    }
}
