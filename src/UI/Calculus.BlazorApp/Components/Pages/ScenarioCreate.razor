@using Calculus.BlazorApp.Clients.Scenario
@using Models;

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary p-4 d-flex flex-column align-items-center justify-content-center"
    style="width: 150px; height: 150px;" data-bs-toggle="modal" data-bs-target="#staticBackdrop"
    @onclick="ClearErrorMessageAndScenarioName">
    <i class="bi bi-clipboard2-plus fs-1"></i> <!-- Larger icon -->
    <span class="fs-6 mt-2">Create Scenario</span> <!-- Smaller text -->
</button>

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="scenarioName" class="form-label">Scenario Name</label>
                    <input type="text" class="form-control" id="scenarioName" @bind=ScenarioName />
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="text-danger mt-2">@ErrorMessage</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="CreateScenarioAsync">Create</button>
            </div>
        </div>
    </div>
</div>

@code {

    private string? ScenarioName;
    private string? ErrorMessage;

    [Inject]
    private IScenarioClient ScenarioClient { get; set; } = null!;

    private async Task CreateScenarioAsync()
    {
        if (string.IsNullOrEmpty(ScenarioName))
        {
            ErrorMessage = "Scenario name cannot be empty.";
            return;
        }

        var response = await ScenarioClient.CreateScenarioAsync(new CreateScenarioDto { Name = ScenarioName });
        if (response.Message is not null)
        {
            // Show error message
            ErrorMessage = response.Message;
        }
        else
        {
            // Close modal
            ScenarioName = string.Empty;
            ErrorMessage = null;
        }
    }

    private void ClearErrorMessageAndScenarioName()
    {
        ErrorMessage = null;
        ScenarioName = string.Empty;
    }
}
